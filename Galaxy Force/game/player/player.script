local data = require ("main.data")

local DRAG = 0.2
local ACCEL = 0.4
local SPEED_MAX = 1.5
local SCROLL_SPEED = 0.5
local RELOAD = 10
local GP_TOL = 0.5
local INVUL = 200

local function invulnerable(self)
	self.invul = INVUL
	msg.post("#co", "disable")
	data.fuel = 100
end	

function init(self)
	msg.post(".", "acquire_input_focus")
	self.correction = vmath.vector3()
	self.move = vmath.vector3(0,0,0)
	data.state = data.STATE_PLAYING
	data.scrollpos = vmath.vector3(0,0,0)
	data.fuel = 100
	data.bosses = 0
	if data.lives < 3 then data.lives = data.lives + 1 end
	go.set_position(vmath.vector3(16,130,0))
	self.camera = true
	self.reload = 0
	self.invul = 0
	self.lock = 5
	invulnerable(self)
end

local function move(self)
	if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX
	elseif self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end

	if self.move.y < -SPEED_MAX then self.move.y = -SPEED_MAX
	elseif self.move.y > SPEED_MAX then self.move.y = SPEED_MAX end

	local pos = go.get_position() + self.move
	if self.camera then pos.x = pos.x + SCROLL_SPEED end

	go.set_position(pos)
	data.playerpos = pos
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end

	if self.move.y > 0 then self.move.y = self.move.y - DRAG
		if self.move.y < 0 then self.move.y = 0 end
	elseif self.move.y < 0 then self.move.y = self.move.y + DRAG
		if self.move.y > 0 then self.move.y = 0 end
	end
end

local function bounds(self)
	local pos = go.get_position() - data.scrollpos
	if pos.x < 10 then pos.x = 10
	elseif pos.x > 300 then pos.x = 300
	end
	if pos.y < 10 then pos.y = 10
	elseif pos.y > 154 then pos.y = 154
	end

	go.set_position(pos + data.scrollpos)
end

local function camera(self)
	data.scrollpos.x = data.scrollpos.x + SCROLL_SPEED
	msg.post("view#script", "snap_to", {position = data.scrollpos})
end

local function checks(self)
	if self.camera then
		data.fuel = data.fuel - 0.04
		if data.fuel <= 0 then
			data.fuel = 0
			self.move.y = self.move.y - SPEED_MAX
		end
	end

	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			msg.post("#co", "enable")
		elseif self.invul % 6 < 3 then
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
		else
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		drag(self)
		bounds(self)
		checks(self)

		if self.camera then	camera(self) end
		if self.reload > 0 then self.reload = self.reload - 1 end
		if self.lock > 0 then self.lock = self.lock - 1 end

		self.correction = vmath.vector3()
	end
end

local function shoot(self)
	if self.reload == 0 then
		factory.create("#bomb_factory")
		self.reload = RELOAD * 3
	end

	if self.reload % RELOAD == 0 then
		sound.play("main:/sound#shot", {gain = 0.2})
		factory.create("#rocket_factory")
	end
end

local function returntomenu(self)
	msg.post("main:/sound", "stop_sound", {})
	msg.post("view#script", "snap_to", {position = vmath.vector3(0,0,0)})
	msg.post("main:/handler", "show_menu")
end

local function level_clear(self)
	data.state = data.STATE_LEVELCLEAR
	if data.level < 4 then msg.post("/common/view#clear", "show", {})
	else msg.post("/common/view#complete", "show", {})
	end
end

local function input_playing (self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - (ACCEL * action.value)
	elseif action_id == hash("right") then
		self.move.x = self.move.x + (ACCEL * action.value)
	elseif action_id == hash("down") then
		self.move.y = self.move.y - (ACCEL * action.value)
	elseif action_id == hash("up") then
		self.move.y = self.move.y + (ACCEL * action.value)
	elseif action_id == hash("action") then
		shoot(self)
	elseif action_id == hash("quit") and action.pressed then
		returntomenu(self)
	end

	--if action_id == hash("debug") and action.pressed then level_clear(self) end
end

local function input_getready (self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.state = data.STATE_PLAYING
	end
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level < 5 then
			if data.maxlevel < data.level then data.maxlevel = data.level end
			msg.post("game:/loader", "new_level", {})
		else
			data.maxlevel = 1
			returntomenu(self)
		end
	end	
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		if data.score > data.hiscore then data.hiscore = data.score end
		returntomenu(self)
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING and self.lock == 0 then
		input_playing (self, action_id, action)
	elseif data.state == data.STATE_GETREADY then
		input_getready(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end

local function resetpos(self)
	go.set_position(vmath.vector3(data.scrollpos.x + 16,130,0))
end

local function collision(self, message)
	msg.post("/common/explosion", "explode", {pos = go.get_position()})
	data.lives = data.lives - 1
	invulnerable(self)
	resetpos(self)

	if data.lives < 0 then
		sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
		data.state = data.STATE_GAMEOVER
		msg.post("/common/view#gameover", "show", {})
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("contact_point_response") and self.invul == 0 then
		collision(self, message)
	elseif message_id == hash("stop") then
		self.camera = false
	elseif message_id == hash("clear") then
		level_clear(self)
	end
end
