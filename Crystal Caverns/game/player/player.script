local data = require ("main.data")

local DRAG = 0.25
local ACCEL = 0.4
local SPEED_MAX = 1.5

local FALL_MAX = 4.0
local GRAVITY = 0.20
local JUMP = 4.4

local ONGROUND = 3

local LAVA_TILE = 16
local SPIKE_TILE = 19
local SOLID_TILE = 11
local FINISH_TILE = 110
local GEM_TILE = 6

function init(self)
	msg.post(".", "acquire_input_focus")
	self.correction = vmath.vector3()
	self.move = vmath.vector3(0,0,0)
	self.snap = true
	self.timer = 0
	self.onground = 0
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3()
end

local function move(self)
	local p = go.get_position() + self.move
	go.set_position(p)
	data.playerpos = p
end

local function camera(self)
	if self.snap then
		msg.post("view#script", "snap_to", { position = go.get_position()})
		self.snap = false
	else	
		msg.post("view#script", "look_at", { position = go.get_position()})
	end
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function dead(self)
	if data.lives == 0 then
		msg.post("#co", "disable")
		self.move = vmath.vector3(0,0,0)
		sprite.set_constant("#sprite", "tint", vmath.vector4(0,0,0,0))
		data.state = data.STATE_GAMEOVER
		msg.post("/common/view#gameover", "show", {})
	else
		data.lives = data.lives - 1
		go.set_position(data.spawnpos)
		self.move = vmath.vector3(0,0,0)
	end
end	

local function hit_lava(self, x, y)
	sound.play("main:/sound#hiss")
	dead(self)
end

local function hit_spike(self)
	sound.play("main:/sound#death")
	dead(self)
end

local function pickup_gem(self, pos)
	tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
	sound.play("main:/sound#gem")
	data.gems = data.gems + 1
end

local function level_clear(self)
	data.state = data.STATE_LEVELCLEAR
	sound.stop("main:/sound#lift")
	sound.play("main:/sound#clear")
	if data.level < 4 then msg.post("/common/view#levelclear", "show", {})
	else msg.post("/common/view#complete", "show", {})
	end
end

local function checks(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	if t == LAVA_TILE then hit_lava(self, pos.x, pos.y+1)
	elseif t == SPIKE_TILE or t == SPIKE_TILE+1 then hit_spike(self)
	elseif t >= FINISH_TILE and self.onground == ONGROUND then level_clear(self)
	elseif t == GEM_TILE then pickup_gem(self, pos)
	end
	
	if self.onground > 0 then self.onground = self.onground - 1 end
end

local function anim(self)
	if self.onground == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("left_jump")})
			self.anim.x = 0
		else
			msg.post("#sprite", "play_animation", {id = hash("right_jump")})
			self.anim.x = 0
		end
	elseif self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("left")})
			self.anim.x = -1
		else
			msg.post("#sprite", "play_animation", {id = hash("right")})
			self.anim.x = 1
		end
	elseif self.move.x == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("left_static")})
			self.anim.x = 0
		else
			msg.post("#sprite", "play_animation", {id = hash("right_static")})
			self.anim.x = 0
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		drag(self)
		gravity(self)
		checks(self)
		anim(self)
	end

	camera(self)

	self.timer = self.timer + 1
	self.correction = vmath.vector3()
end

local function jump(self)
	self.move.y = JUMP
	sound.play("main:/sound#jump")
end

local function input_playing (self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
		self.dir.x = 1
	end

	if action_id == hash("action") and action.pressed and self.onground > 0 then
		jump(self)
	end

	--if action_id == hash("debug") and action.pressed then level_clear(self) end

	if action_id == hash("quit") and action.pressed then
		msg.post("view#script", "snap_to", { position = data.offset})
		msg.post("main:/sound", "stop_sound", {})
		msg.post("main:/handler", "show_menu")
	end
end

local function input_getready (self, action_id, action)
	if action_id == hash("action") and action.pressed then
		msg.post("view#getready", "hide", {})
		data.state = data.STATE_PLAYING
	end	
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level < 5 then
			if data.maxlevel < data.level then data.maxlevel = data.level end
			msg.post("game:/loader", "new_level", {})
			data.state = data.STATE_GETREADY
		else
			data.maxlevel = 1
			msg.post("view#script", "snap_to", { position = data.offset})
			msg.post("main:/handler", "show_menu")
		end
	end	
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		msg.post("view#script", "snap_to", { position = data.offset})
		msg.post("main:/handler", "show_menu")
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing (self, action_id, action)
	elseif data.state == data.STATE_GETREADY then
		input_getready(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
			if math.abs(message.normal.x) == 1 then self.move.x = 0 end
			if message.normal.y == 1 then
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y == -1 then
				self.move.y = -GRAVITY
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("dead") then
		dead(self)
	elseif message_id == hash("contact_point_response") then
		collision(self, message)
	end
end
