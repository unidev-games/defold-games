local data = require ("main.data")

local function disablenode (self, node)
	gui.set_enabled(node, false)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("main:/sound", "stop_sound", {})
	msg.post("@render:", "clear_color", { color = vmath.vector4(13/255, 24/255, 0/255, 1) } )
	sound.play("main:/sound#music2")
	self.node = gui.get_node("container")
	self.wait = 2
	data.state = data.STATE_MENU
	if data.maxlevel == 1 then
		gui.set_color(gui.get_node("1"), vmath.vector4(249/255,234/255,151/255,0.3))
		gui.set_text(gui.get_node("1"), "1. CONTINUE")
	else
		gui.set_color(gui.get_node("1"), vmath.vector4(249/255,234/255,151/255,1))
		gui.set_text(gui.get_node("1"), string.format("1. CONTINUE (%d/4)", data.maxlevel))
	end

	self.handpos = 1
	if data.maxlevel == 1 then self.handpos = 2 end
	self.handpos_y = {
		gui.get_position(gui.get_node("1")),
		gui.get_position(gui.get_node("2")),
		gui.get_position(gui.get_node("3")),
		gui.get_position(gui.get_node("4"))
	}
end

function update(self, dt)
	local pos = vmath.vector3(self.handpos_y[self.handpos].x - 68, self.handpos_y[self.handpos].y - 20, 0)
	gui.set_position(gui.get_node("hand"), pos)
	if data.state == data.STATE_MENU then
		if self.wait > 0 then self.wait = self.wait - 1 end
	end
end

local function show(self)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(0, 0, 0), gui.EASING_INOUTQUAD, 0.5)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.5)
	data.state = data.STATE_MENU
	self.wait = 2
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(0, -100, 0), gui.EASING_INOUTQUAD, 0.5, 0, disablenode)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.5)
	self.wait = 2
end

local function start_game(self)
	data.lives = data.MAX_LIVES
	data.state = data.STATE_GETREADY
	msg.post("main:/sound", "stop_sound", {})
	sound.play("main:/sound#music", {gain = 0.5})
	msg.post("main:/handler", "show_game")
end

local function continue(self)
	if data.maxlevel ~= 1 then
		data.level = data.maxlevel
		start_game(self)
	end
end

local function newgame(self)
	data.level = 1
	start_game(self)
end

local function controls(self)
	hide(self)
	data.state = data.STATE_CONTROLS
	msg.post("#controls", "show", {})
end

local function exitgame(self)
	msg.post("@system:", "exit", {code = 0})
end

function on_input(self, action_id, action)
	if data.state == data.STATE_MENU and self.wait == 0 then
		if action_id == hash("1") and action.pressed then
			continue(self)
		elseif action_id == hash("2") and action.pressed then
			newgame(self)
		elseif action_id == hash("3") and action.pressed then
			controls(self)
		elseif action_id == hash("4") and action.pressed then
			exitgame(self)
		elseif action_id == hash("up") and action.pressed then
			self.handpos = self.handpos - 1
			if self.handpos < 1 then self.handpos = 4 end
			sound.play("main:/sound#shot")
		elseif action_id == hash("down") and action.pressed then
			self.handpos = self.handpos + 1
			if self.handpos > 4 then self.handpos = 1 end
			sound.play("main:/sound#shot")
		elseif action_id == hash("action") and action.pressed then
			if self.handpos == 1 then continue(self)
			elseif self.handpos == 2 then newgame(self)
			elseif self.handpos == 3 then controls(self)
			elseif self.handpos == 4 then exitgame(self)
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then show(self)
	end
end