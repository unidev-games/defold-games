local data = require ("main.data")

function init(self)
	msg.post(".", "acquire_input_focus")
	self.vel = vmath.vector3()
	self.snake = {}
	self.snakepos = 1
	self.time = 0
	self.inputdelay = 0
	data.energy = 100
	if data.level == 1 then	data.state = data.STATE_GETREADY
	else data.state = data.STATE_PLAYING
	end
	msg.post("@render:", "clear_color", { color = vmath.vector4(6/255, 6/255, 8/255, 1) } )
end

local function getcross(self, x, y)
	local n = tilemap.get_tile("/level#tilemap", "world", x, y + 1)
	local s = tilemap.get_tile("/level#tilemap", "world", x, y - 1)
	local e = tilemap.get_tile("/level#tilemap", "world", x + 1, y)
	local w = tilemap.get_tile("/level#tilemap", "world", x - 1, y)

	local cross = {n = n, s = s, e = e, w = w}

	return cross
end

local function setdrillpiece(self, x, y)
	local t = 1
	local c = getcross(self, x, y)

	if c.n > 1 and c.n < 16 then t = 5
	elseif c.s > 1 and c.s < 16 then t = 3
	elseif c.e > 1 and c.e < 16 then t = 4
	elseif c.w > 1 and c.w < 16 then t = 2
	end

	tilemap.set_tile("/level#tilemap", "world", x, y, t)
end

local function setshaftpiece(self, x, y)
	local t = 8
	local c = getcross(self, x, y)

	if c.n > 1 and c.n < 16 and c.s > 1 and c.s < 16 then t = 7
	elseif c.e > 1 and c.e < 16 and c.w > 1 and c.w < 16 then t = 6
	end

	tilemap.set_tile("/level#tilemap", "world", x, y, t)
end

local function rewind(self)
	if self.snakepos > 1 then
		self.vel.z = 1
		local pos = go.get_position()
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 1)
		self.snake[self.snakepos] = nil
		self.snakepos = self.snakepos - 1
		go.set_position(self.snake[self.snakepos])
		setdrillpiece(self, self.snake[self.snakepos].x, self.snake[self.snakepos].y)
	else
		msg.post("main:/sound#rewind", "stop_sound")
	end
end

local function move(self, vel)
	local old = go.get_position()
	local pos = go.get_position() + vel

	if pos.x < 1 then pos.x = 1
	elseif pos.x > 40 then pos.x = 40
	end

	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t == 0 or t == 1 or t == 17 then
		setdrillpiece(self, pos.x, pos.y)
		setshaftpiece(self, old.x, old.y)
		go.set_position(pos)
		self.snakepos = self.snakepos + 1
		self.snake[self.snakepos] = pos

		if t == 17 then
			data.eaten = data.eaten + 1
			msg.post("main:/sound#eat", "play_sound")
		end
	elseif t > 0 and t < 16 and old ~= pos then
		rewind(self)
	end
end

local function checks(self)
	if data.energy <= 0 then
		msg.post("/common/view#gameover", "show")
		msg.post("main:/sound#gameover", "play_sound")
		msg.post("main:/sound#rewind", "stop_sound")
		self.inputdelay = 30
	elseif data.eaten >= data.pills then
		if data.level < 8 then
			msg.post("/common/view#levelclear", "show")
			msg.post("main:/sound#clear", "play_sound")
		else
			data.maxlevel = 1
			msg.post("/common/view#complete", "show")
			msg.post("main:/sound#clear", "play_sound")
		end
		self.inputdelay = 30
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		local vel 

		self.time = self.time + 1

		if self.time % 4 == 0 then
			if self.vel.x ~= 0 then
				vel = vmath.vector3(self.vel.x, 0, 0)
				move(self, vel)
			end

			if self.vel.y ~= 0 then
				vel = vmath.vector3(0, self.vel.y, 0)
				move(self, vel)
			end
			self.vel = vmath.vector3(0,0,0)
		end
		checks(self)
	end

	if self.inputdelay > 0 then	self.inputdelay = self.inputdelay - 1 end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("spawn") then
		self.snake[1] = (vmath.vector3(message.x, message.y, 0))
		go.set_position(vmath.vector3(message.x, message.y, 0))
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("up") then
		self.vel.y = 1
	elseif action_id == hash("down") then
		self.vel.y = -1
	elseif action_id == hash("left") then
		self.vel.x = -1
	elseif action_id == hash("right") then
		self.vel.x = 1
	elseif action_id == hash("action") then
		rewind(self)
		if action.pressed then msg.post("main:/sound#rewind", "play_sound")
		elseif action.released then msg.post("main:/sound#rewind", "stop_sound")
		end
	elseif action_id == hash("exit") then
		msg.post("main:/sound", "stop_sound")
		msg.post("main:/handler", "show_menu")
	end
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		data.maxlevel = data.level
		msg.post("game:/loader", "new_level", {})
	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		msg.post("main:/sound", "stop_sound")
		msg.post("main:/handler", "show_menu")
	end
end

local function input_getready(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		msg.post("/common/view#tutorial", "hide")
		data.state = data.STATE_PLAYING
	end
end

function on_input(self, action_id, action)
	if self.inputdelay > 0 then
		return
	end
	
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	elseif data.state == data.STATE_GETREADY then
		input_getready(self, action_id, action)
	end
end