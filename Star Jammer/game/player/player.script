local data = require ("main.data")

local DRAG = 0.25
local ACCEL = 0.4
local SPEED_MAX = 1.5

local FALL_MAX = 3.0
local GRAVITY = 0.15
local FLOAT = 0.1
local JUMP = 1.8
local BOUNCE = 0.5

local ONGROUND = 10
local INVUL = 100

local INPUT_LOCK = 40

local function gun(self)
	if data.gun == 0 or data.ammo == 0 then
		msg.post("#gun", "disable")
	else
		msg.post("#gun", "enable")
		sprite.play_flipbook("#gun", tostring(data.gun))
	end
end

local function invulnerable(self)
	self.invul = INVUL
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.correction = vmath.vector3()
	self.move = vmath.vector3(0,0,0)
	self.dir = vmath.vector3(1,0,0)
	self.anim = vmath.vector3()
	self.camsnap = true
	self.lock = 0
	self.onground = 0
	self.invul = 0
	self.shoot = 0
	self.time = 0

	invulnerable(self)

	data.state = data.STATE_PLAYING
end

local function move(self)
	local pos = go.get_position() + self.move
	go.set_position(pos)
	data.playerpos = pos
end

local function camera(self)
	if self.camsnap then
		msg.post("view#script", "snap_to", { position = go.get_position()})
		self.camsnap = false
	else	
		msg.post("view#script", "look_at", { position = go.get_position()})
	end
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function level_clear(self)
	self.lock = INPUT_LOCK
	sound.play("main:/sound#door")
	if data.level < data.NUM_LEVELS then msg.post("/common/view#clear", "show", {})
	else msg.post("/common/view#complete", "show", {})
	end
end

local function pickup(self, type)
	if type >= 1 and type <= 4 then
		data.gun = type
		local name = {"HANDGUN", "SHOTGUN", "AUTOGUN", "GRENADE LAUNCHER"}
		msg.post("view#game", "popup", {text = "PICKED UP THE "..name[data.gun]})
		data.ammo = data.ammo + 20
	elseif type == 5 then
		if data.energy < 8 then
			data.energy = data.energy + 1
		end
	elseif type == 6 then
		data.credits = data.credits + 10
	elseif type == 8 then
		data.keys = data.keys + 1
		msg.post("view#game", "popup", {text = "PICKED UP A KEY"})
	elseif type == 9 then
		data.ammo = data.ammo + 20
	end
	sound.play("main:/sound#pickup")
end

local function hurt(self)
	if self.invul == 0 then
		data.energy = data.energy - 1
		if data.energy == 2 then msg.post("view#game", "popup", {text = "ENERGY LEVEL LOW"})
		elseif data.energy == 1 then msg.post("view#game", "popup", {text = "ENERGY LEVEL CRITICAL!"})
		end
		sound.play("main:/sound#hit")
		invulnerable(self)
	end
end

local function checks(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)

	if t >=1 and t <=10 then
		tilemap.set_tile("/level#tilemap", "world", pos.x, pos.y, 0)
		pickup(self, t)
	elseif t == 114 then hurt(self)
	end
	
	if self.onground > 0 then self.onground = self.onground - 1 end

	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			--
		elseif self.invul % 6 < 3 then
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
		else
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0))
		end
	end

	if data.energy == 0 then
		self.lock = INPUT_LOCK
		msg.post("view#gameover", "show")
		sound.play("main:/sound#door")
	end
end

local function anim(self)
	if self.onground == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", true)
			sprite.set_hflip("#gun", true)
			self.anim.x = 0
			particlefx.stop("#dust")
		else
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			sprite.set_hflip("#sprite", false)
			sprite.set_hflip("#gun", false)
			self.anim.x = 0
			particlefx.stop("#dust")
		end
	elseif self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", true)
			sprite.set_hflip("#gun", true)
			self.anim.x = -1
			particlefx.play("#dust")
		else
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", false)
			sprite.set_hflip("#gun", false)
			self.anim.x = 1
			particlefx.play("#dust")
		end
	elseif self.move.x == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", true)
			sprite.set_hflip("#gun", true)
			self.anim.x = 0
			particlefx.stop("#dust")
		else
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", false)
			sprite.set_hflip("#gun", false)
			self.anim.x = 0
			particlefx.stop("#dust")
		end
	end
end

local function otto(self)
	local str = ""
	if data.level == 1 then
		if self.time == 60 then str = "IT'S DANGEROUS TO GO ALONE!"
		elseif self.time == 60*5 then str = "SO I'LL BE GOING WITH YOU"
		elseif self.time == 60*10 then str = "MY NAME IS OTTO"
		elseif self.time == 60*15 then str = "I PROVIDE STATUS UPDATES"
		end
	elseif self.time == 60 then
		str = "YOU'RE NOW ON\nLEVEL "..tostring(data.level)
	end
	
	if str ~= "" then msg.post("view#game", "popup", {text = str}) end

	self.time = self.time + 1
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		drag(self)
		gravity(self)
		checks(self)
		anim(self)
		gun(self)
		otto(self)
	end

	camera(self)
	self.correction = vmath.vector3()
	if self.lock > 0 then self.lock = self.lock - 1 end
end

local function jump(self, pressed)
	if pressed and self.onground > 0 then
		self.move.y = JUMP
		self.onground = 0
		sound.play("main:/sound#buzz")
	elseif self.onground == 0 and self.move.y > 0 then
		self.move.y = self.move.y + FLOAT
	end
end

local function shoot(self, action)
	local move = vmath.vector3(self.dir)
	local pos = go.get_position()
	local before = data.ammo
	
	if action.pressed then self.shoot = 1
	elseif action.released then self.shoot = 0
	else self.shoot = self.shoot + 1
	end

	pos.y = pos.y - 1
	pos.x = pos.x + (self.dir.x * 4)

	if (data.gun == 0 or data.ammo == 0) and self.shoot == 1 then
		factory.create("#taser_factory", pos, nil, {move = self.move + move})
		sound.play("main:/sound#taser")
	elseif data.gun == 1 and self.shoot == 1 and data.ammo > 0 then
		factory.create("#shot_factory", pos, nil, {move = move * 6})
		sound.play("main:/sound#shot1")
		self.move = self.move - move
		data.ammo = data.ammo - 1
	elseif data.gun == 2 and self.shoot == 1 and data.ammo > 0 then
		pos.y = pos.y - 1
		pos.x = pos.x + self.dir.x * 6
		move.y = 0.05
		factory.create("#shot_factory", pos, nil, {move = move * 6})
		move.y = -0.05
		factory.create("#shot_factory", pos, nil, {move = move * 6})
		sound.play("main:/sound#shot2")
		self.move = self.move - move
		data.ammo = data.ammo - 2
	elseif data.gun == 3 and self.shoot % 6 == 1 and self.shoot < 15 and data.ammo > 0 then
		pos.y = pos.y - 1
		factory.create("#shot_factory", pos, nil, {move = move * 6})
		sound.play("main:/sound#shot3")
		self.move = self.move - move
		data.ammo = data.ammo - 1
	end

	if data.ammo < 0 then data.ammo = 0 end

	if before > 0 and data.ammo == 0 then
		msg.post("view#game", "popup", {text = "OUT OF AMMO"})
	end
end

local function exitgame(self)
	msg.post("view#script", "snap_to", {position = data.offset})
	msg.post("main:/sound", "stop_sound", {})
	msg.post("main:/handler", "show_menu")
end

local function shop(self)
	self.lock = INPUT_LOCK
	msg.post("view#shop", "show")
end

local function trigger(self, id)
	if id == 127 then shop(self)
	elseif id == 125 then
		level_clear(self)
	end
end

local function input_playing (self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
		self.dir.x = 1
	elseif action_id == hash("action") then
		jump(self, action.pressed)
	elseif action_id == hash("shoot") then
		shoot(self, action)
	elseif action_id == hash("exit") and action.pressed then
		exitgame(self)
		--level_clear(self)
	elseif action_id == hash("debug") and action.pressed then
		--data.credits = 1000
		--shop(self)
	end
end

local function input_getready (self, action_id, action)
	if (action_id == hash("action") or action_id == hash("shoot")) and action.pressed then
		msg.post("view#getready", "hide", {})
		data.state = data.STATE_PLAYING
	end	
end

local function input_levelclear(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("shoot")) and action.pressed then
		if data.level < data.NUM_LEVELS then
			data.level = data.level + 1
			if data.maxlevel < data.level then data.maxlevel = data.level end
			msg.post("game:/loader", "new_level", {})
		else
			data.maxlevel = 1
			exitgame(self)
		end
	end	
end

local function input_gameover(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("shoot")) and action.pressed then
		exitgame(self)
	end
end

function on_input(self, action_id, action)
	if self.lock > 0 then return end
	
	if data.state == data.STATE_PLAYING then
		input_playing (self, action_id, action)
	elseif data.state == data.STATE_SHOP then
		msg.post("view#shop", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_GETREADY then
		input_getready(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
			
			if math.abs(message.normal.x) > 0.5 then self.move.x = 0 end
			if message.normal.y > 0.5 then
				self.move.y = 0
				self.onground = ONGROUND
			elseif message.normal.y == -1 then
				self.move.y = -BOUNCE
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("contact_point_response") then
		if message.other_group == hash("world")
		or message.other_group == hash("dest")
		or message.other_group == hash("lift") then
			collision(self, message)
		elseif message.other_group == hash("enemy") then
			hurt(self)
		end
	elseif message_id == hash("item") then
		pickup(self, message.type)
	elseif message_id == hash("trig") then
		trigger(self, message.id)
	end
end
