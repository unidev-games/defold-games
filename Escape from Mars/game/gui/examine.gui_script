local data = require "main.data"
local item = require "game.core.item"

local function disable_node (self, node)
	gui.set_enabled(node, false)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.node = gui.get_node("container")
	self.slot = 0
	self.action = ""
	gui.set_position(self.node, vmath.vector3(640, 300, 0))
	gui.set_enabled(self.node, false)
	gui.set_color(self.node, vmath.vector4(1,1,1,0))
end

local function populate(self,slot)
	self.slot = slot
	local itm = data.inv[slot]
	local anim = "item"..tostring(itm)

	gui.play_flipbook(gui.get_node("icon"), anim)
	gui.set_text(gui.get_node("name"), item.getname(itm))

	local prop = item.getprop(itm)
	local value = item.getvalue(itm)
	local slt = item.getslot(itm)
	local str = ""

	if prop == item.PROP_DAMAGE then
		if slt == item.SLOT_LEFT then str = "MELEE"
		else str = "RANGED"
		end
	str = str.." DAMAGE="..tostring(value)
	elseif prop == item.PROP_ARMOUR then str = "PROTECTION="..tostring(value)
	elseif prop == item.PROP_HEALTH then str = "RESTORES "..tostring(value).."HP"
	elseif prop == item.PROP_POWER then str = "RESTORES "..tostring(value).." POWER"
	elseif prop == item.PROP_AMMO then str = tostring(value).." ROUNDS"
	else str = "NO DATA"
	end

	gui.set_text(gui.get_node("prop"), str)

	local f = true
	if slot > data.INV_SIZE then self.action = "UNEQUIP"
	elseif item.getslot(itm) == item.SLOT_USE then self.action = "USE"
	elseif item.getslot(itm) == item.SLOT_LOAD then self.action = "LOAD"
	elseif item.getslot(itm) ~= item.SLOT_NONE then self.action = "EQUIP"
	else
		self.action = ""
		f = false
	end

	gui.set_enabled(gui.get_node("action"), f)
	gui.set_text(gui.get_node("text1"), self.action)
end

local function show(self, slot)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(640, 360, 0), gui.EASING_INOUTQUAD, 0.25)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.25)
	data.state = data.STATE_EXAMINE
	sound.play("main:/sound#open")

	populate(self, slot)
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(640, 300, 0), gui.EASING_INOUTQUAD, 0.25, 0, disablenode)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.25)
	data.state = data.STATE_PLAYING
	sound.play("main:/sound#close")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self, message.slot)
	elseif message_id == hash("hide") then
		hide(self)
	end
end

local function drop(self)
	local pos = data.world2tile(data.playerpos)
	local t = tilemap.get_tile("/level#tilemap", "control", pos.x, pos.y)
	if t == 0 then
		msg.post("player", "drop", {slot = self.slot})
		hide(self)
	else
		msg.post("view#game", "tick", {text = "NO ROOM TO DROP ITEM"})
	end
end

local function actionbutton(self)
	if self.action ~= "" then
		msg.post("player", self.action, {slot = self.slot})
		hide(self)
	end
end

local function processclick(self, action)
	if gui.pick_node(gui.get_node("close"), action.x, action.y) then
		hide(self)
	elseif gui.pick_node(gui.get_node("drop"), action.x, action.y) then
		drop(self)
	elseif gui.pick_node(gui.get_node("action"), action.x, action.y) then
		actionbutton(self)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed and data.state == data.STATE_EXAMINE then
		processclick(self, action)
	end
end

