local data = require ("main.data")

local function disablenode(self, node)
	gui.set_enabled(node, false)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.lock = false
	self.node = gui.get_node("container")
	self.order = {1,2,3,4,5}
	self.px = {-160,-80,0,80,160}
	gui.set_enabled(self.node, false)
	gui.set_color(self.node, vmath.vector4(1,1,1,0))
	gui.set_position(self.node, vmath.vector3(640,300, 0))

	local f = false

	while not f do
		for n = 1, 5 do
			local r = math.random(1,5)
			self.order[n], self.order[r] = self.order[r], self.order[n]
		end

		f = true
		for n = 1, 5 do
			if self.order[n] == n then f = false end
		end
	end

	for n = 1, 5 do
		local node = gui.get_node(tostring(self.order[n]))
		gui.set_position(node, vmath.vector3(self.px[n], 80, 0))
	end
end

local function show(self)
	self.lock = false
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(640,360,0), gui.EASING_INOUTQUAD, 0.25, 0.0)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.25, 0.0)
	msg.post("/common/view#game", "tick", {text = "ALIGN FUSES TO RESTORE MAIN POWER"})
	data.state = data.STATE_PUZZLE
	sound.play("main:/sound#open")
end

local function hide(self)
	self.lock = true
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(640,300,0), gui.EASING_INOUTQUAD, 0.25, 0.0, disablenode)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.25, 0.0)
	data.state = data.STATE_PLAYING
	sound.play("main:/sound#close")
end
	
function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self)
	end
end

local function unlock(self, node)
	self.lock = false
end

local function checkdone(self, node)
	local done = true
	for n = 1, 5 do
		if self.order[n] ~= n then done = false end
	end

	sound.play("main:/sound#clunk")
	
	if done then
		msg.post("/common/view#game", "tick", {text = "MAIN POWER RESTORED"})
		sound.play("main:/sound#positive")
		sound.play("main:/sound#startup", {gain = 0.2})
		data.elec = true
		hide(self)
	else
		for n = 1, 5 do
			local node = gui.get_node(tostring(n))
			local pos = gui.get_position(node)
			local func = nil
			pos.y = 80
			if n == 5 then func = unlock end
			gui.animate(node, gui.PROP_POSITION, pos, gui.EASING_LINEAR, 0.6, 0.5, func)
		end
		sound.play("main:/sound#fuseup")
	end
end

local function clunk (self, node)
	sound.play("main:/sound#clunk")
end

local function engage(self)
	self.lock = true
	for n = 1, 5 do
		local node = gui.get_node(tostring(n))
		local pos = gui.get_position(node)
		pos.y = 18
		local func = clunk
		if n == 5 then func = checkdone end
		gui.animate(node, gui.PROP_POSITION, pos, gui.EASING_LINEAR, 1, n/4, func)
	end
	sound.play("main:/sound#fusedown")
end

local function swap(self, a, b)
	self.lock = true
	self.order[a], self.order[b] = self.order[b], self.order[a]

	local node = gui.get_node(tostring(self.order[a]))
	gui.animate(node, gui.PROP_POSITION, vmath.vector3(self.px[a], 80, 0), gui.EASING_INOUTQUAD, 0.5)

	node = gui.get_node(tostring(self.order[b]))
	gui.animate(node, gui.PROP_POSITION, vmath.vector3(self.px[b], 80, 0), gui.EASING_INOUTQUAD, 0.5, 0, unlock)

	sound.play("main:/sound#fuseswap")
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed and data.state == data.STATE_PUZZLE and not self.lock then
		if gui.pick_node(gui.get_node("cancel"), action.x, action.y) then
			hide(self)
		elseif gui.pick_node(gui.get_node("ok"), action.x, action.y) then
			engage(self)
		elseif gui.pick_node(gui.get_node("swap1"), action.x, action.y) then swap(self, 1, 2)
		elseif gui.pick_node(gui.get_node("swap2"), action.x, action.y) then swap(self, 2, 3)
		elseif gui.pick_node(gui.get_node("swap3"), action.x, action.y) then swap(self, 3, 4)
		elseif gui.pick_node(gui.get_node("swap4"), action.x, action.y) then swap(self, 4, 5)
		end
	end
end

