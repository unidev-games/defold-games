local data = require "main.data"
local enemy = require "game.enemy.enemy"

function init(self)
	msg.post(".", "acquire_input_focus")
	self.dest = vmath.vector3()
	self.power = 1
	particlefx.play("#bubbles")
end

local function move(self)
	local pos = go.get_position()
	if pos.x < self.dest.x then pos.x = pos.x + 2
	elseif pos.x > self.dest.x then pos.x = pos.x - 2
	elseif pos.y < self.dest.y then pos.y = pos.y + 2
	elseif pos.y > self.dest.y then pos.y = pos.y - 2
	end
	go.set_position(pos)
end

local function nextlevel(self)
	sound.play("main:/sound#chirp")
	msg.post("/level", "newlevel", {})
	self.power = 1
	particlefx.stop("#strong")
	data.level = data.level + 1
	if enemy.total() == 0 then data.energy = data.energy + 1 end
	if data.energy > 9 then data.energy = 9 end
end

local function cond(self)
	local pos = go.get_position()
	if pos.x >= 152 then
		if data.level < 99 then
			nextlevel(self)
		else
			msg.post("view#complete", "show")
		end
	end
end

local function turn(self)
	if data.turn > 0 then data.turn = data.turn + 1 end
	if data.turn > 10 then data.turn = 0 end
end

local function item(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "item", pos.x, pos.y)
	if t > 0 then
		local slot = 1
		while data.item[slot] > 0 and slot < 10 do
			slot = slot + 1
		end
		if data.item[slot] == 0 then
			data.item[slot] = t - 225
			tilemap.set_tile("/level#tilemap", "item", pos.x, pos.y, 0)
			sound.play("main:/sound#pickup")
			msg.post("view#game", "inv")
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		cond(self)
		item(self)
	else
		if data.turn == 0 then data.turn = 1 end
	end
	turn(self)
end

local function hit(self)
	if math.random(1,2) == 1 and data.energy > 0 then
		data.energy = data.energy - 1
		if data.energy < 4 then
			msg.post("view#game", "fade", {col = data.hex2rgba("#9d1f2f")})
		end
	end
	msg.post("/common/fx", "fx", {pos = go.get_position(), fx = data.FX_HIT})
	
	if data.energy <= 0 then
		msg.post("#sprite", "disable")
		msg.post("view#gameover", "show")
		particlefx.stop("#strong")
		particlefx.stop("#bubbles")
		particlefx.play("#pfx")
		sound.play("main:/sound#gameover")
		data.playerpos = vmath.vector3(-100,0,0)
	else
		sound.play("main:/sound#hit3")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
		self.dest = message.pos
	elseif message_id == hash("hit") then
		hit(self)
	end
end

local function attack(self, url)
	msg.post(url, "hit", {power = self.power})
end

local function trymove(self, move)
	local pos = data.world2tile(go.get_position() + move)
	local t = tilemap.get_tile("/level#tilemap", "col", pos.x, pos.y)
	if t == 0 and pos.x > 0 then
		pos = go.get_position() + move
		local url = enemy.ontile(pos)
		if url == nil then
			self.dest = pos
			sound.play("main:/sound#step")
			data.playerpos = pos
		else attack(self, url)
		end
		data.turn = 1
	end
end

local function teleport(self)
	msg.post("/common/fx", "fx", {pos = go.get_position(), fx = data.FX_TELEOUT})
	local pos = data.tile2world(data.getfreetile(self))
	pos.z = 0.2
	go.set_position(pos)
	self.dest = pos
	data.playerpos = pos
	msg.post("/common/fx", "fx", {pos = go.get_position(), fx = data.FX_TELEIN})
	sound.play("main:/sound#teleport")
end

local function freeze(self)
	enemy.freeze()
	sound.play("main:/sound#freeze")
	msg.post("view#game", "fade", {col = data.hex2rgba("#126f7e")})
end

local function bomb(self)
	local pos = go.get_position()
	local url = nil
	msg.post("/common/fx", "fx", {pos = vmath.vector3(pos.x+10, pos.y-14, 0), fx = data.FX_EXPLODE})
	msg.post("/common/fx", "fx", {pos = vmath.vector3(pos.x-10, pos.y-14, 0), fx = data.FX_EXPLODE})
	msg.post("/common/fx", "fx", {pos = vmath.vector3(pos.x+17, pos.y+7, 0), fx = data.FX_EXPLODE})
	msg.post("/common/fx", "fx", {pos = vmath.vector3(pos.x-17, pos.y+7, 0), fx = data.FX_EXPLODE})
	msg.post("/common/fx", "fx", {pos = vmath.vector3(pos.x, pos.y+18, 0), fx = data.FX_EXPLODE})

	url = enemy.ontile(vmath.vector3(pos.x-16, pos.y+16, 0))
	if url then msg.post(url, "hit", {power = 10}) end
	url = enemy.ontile(vmath.vector3(pos.x, pos.y+16, 0))
	if url then msg.post(url, "hit", {power = 10}) end
	url = enemy.ontile(vmath.vector3(pos.x+16, pos.y+16, 0))
	if url then msg.post(url, "hit", {power = 10}) end
	url = enemy.ontile(vmath.vector3(pos.x-16, pos.y, 0))
	if url then msg.post(url, "hit", {power = 10}) end
	url = enemy.ontile(vmath.vector3(pos.x+16, pos.y, 0))
	if url then msg.post(url, "hit", {power = 10}) end
	url = enemy.ontile(vmath.vector3(pos.x-16, pos.y-16, 0))
	if url then msg.post(url, "hit", {power = 10}) end
	url = enemy.ontile(vmath.vector3(pos.x, pos.y-16, 0))
	if url then msg.post(url, "hit", {power = 10}) end
	url = enemy.ontile(vmath.vector3(pos.x+16, pos.y-16, 0))
	if url then msg.post(url, "hit", {power = 10}) end

	msg.post("view#game", "fade", {col = data.hex2rgba("#9d1f2f")})
	sound.play("main:/sound#bomb")
end

local function heal(self)
	data.energy = 9
	sound.play("main:/sound#heal")
end

local function strong(self)
	particlefx.play("#strong")
	self.power = 2
	sound.play("main:/sound#strong")
end

local function useitem(self, num)
	local used = true
	local item = data.item[num]
	
	if item == 1 then teleport(self)
	elseif item == 2 then freeze(self)
	elseif item == 3 then bomb(self)
	elseif item == 4 then strong(self)
	elseif item == 5 then heal(self)
	else used = false
	end

	if used then
		msg.post("view#game", "inv")
		if string.len(data.itemname[item]) <= 1 then msg.post("view#game", "disc", {item = item}) end
		data.itemname[item] = data.itemtype[item]
		data.item[num] = 0
	end
end

local function gameover(self)
	enemy.deleteall()
	msg.post("main:/handler", "show_menu")
end

local function input_playing(self, action_id, action)
	if data.turn == 0 and action.pressed then
		local step = data.TILE_SIZE

		if action_id == hash("up") then
			trymove(self, vmath.vector3(0, step, 0))
		elseif action_id == hash("down") then
			trymove(self, vmath.vector3(0, -step, 0))
		elseif action_id == hash("left") then
			sprite.set_hflip("#sprite", true)
			trymove(self, vmath.vector3(-step, 0, 0))
		elseif action_id == hash("right") then
			sprite.set_hflip("#sprite", false)
			trymove(self, vmath.vector3(step, 0, 0))
		elseif action_id == hash("exit") then
			gameover(self)
		elseif action_id == hash("debug") then
			--nextlevel(self)
		else
			for n = 1, 10 do
				if action_id == hash(tostring(n)) then useitem(self, n) end
			end
		end
	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") then
		gameover(self)
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER or data.state == data.STATE_COMPLETE then
		input_gameover(self, action_id, action)
	end
end
