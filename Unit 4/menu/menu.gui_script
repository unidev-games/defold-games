local data = require ("main.data")

local function disablenode (self, node)
	gui.set_enabled(node, false)
end

local function menu(self)
	for n = 0, 3 do
		local node = gui.get_node(tostring(n))
		if n == self.item then
			gui.set_color(node, data.hex2rgba("#0e0c19"))
			gui.set_position(gui.get_node("select"), vmath.vector3(0, -71-n*38, 0))
		else
			gui.set_color(node, data.hex2rgba("#d8e1a9"))
		end
	end

	local diff = {"EASY", "NORMAL", "HARD"}
	local str = "DIFFICULTY: "..diff[data.difficulty]
	gui.set_text(gui.get_node("0"), str)
	sound.play("main:/sound#beep")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.node = gui.get_node("container")
	self.item = 1
	menu(self)
	msg.post("@render:", "clear_color", {color = vmath.vector4(14/255, 12/255, 25/255, 1)})
	if data.level > data.best then data.best = data.level end
	local str = string.format("LAST: %d\nBEST: %d", data.level, data.best)
	gui.set_text(gui.get_node("lastbest"), str)
	gui.set_position(self.node, vmath.vector3(384, 250, 0))
	gui.set_enabled(self.node, false)
	gui.set_color(self.node, vmath.vector4(1,1,1,0))
end

local function newgame(self)
	data.level = 1
	data.energy = 9
	data.state = data.STATE_PLAYING
	data.itemname = {"?", "?", "?", "?", "?"}
	for n = 1, 10 do data.item[n] = 0 end
	msg.post("main:/handler", "show_game")
end	

local function show(self)
	gui.set_enabled(self.node, true)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(384, 288, 0), gui.EASING_INOUTQUAD, 0.25)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,1), gui.EASING_INOUTQUAD, 0.25)
	data.state = data.STATE_MENU
end

local function hide(self)
	gui.animate(self.node, gui.PROP_POSITION, vmath.vector3(384, 250, 0), gui.EASING_INOUTQUAD, 0.25, 0, disablenode)
	gui.animate(self.node, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INOUTQUAD, 0.25)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self)
	end
end

local function itempressed(self)
	if self.item == 0 then
		data.difficulty = data.difficulty + 1
		if data.difficulty > 3 then data.difficulty = 1 end
		menu(self)
	elseif self.item == 1 then
		newgame(self)
	elseif self.item == 2 then
		hide(self)
		msg.post("#controls", "show")
	elseif self.item ==3 then
		hide(self)
		msg.post("#credits", "show")
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_MENU then
		if action_id == hash("up") and action.pressed then
			self.item = self.item - 1
			if self.item < 0 then self.item = 3 end
			menu(self)
		elseif action_id == hash("down") and action.pressed then
			self.item = self.item + 1
			if self.item > 3 then self.item = 0 end
			menu(self)
		elseif action_id == hash("action") and action.pressed then
			itempressed(self)
		elseif action_id == hash("exit") and action.pressed then
			msg.post("@system:", "exit", {code = 0})
		end
	end
end